version: '3.9'

services:
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:15-alpine
    container_name: nexus-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-nexus}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-nexus_secret}
      POSTGRES_DB: ${DB_NAME:-nexus_stream}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-nexus}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Cache & Sessions
  redis:
    image: redis:7-alpine
    container_name: nexus-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secret}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch - Search Engine
  elasticsearch:
    image: elasticsearch:8.10.2
    container_name: nexus-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - cluster.name=nexus-cluster
      - bootstrap.memory_lock=true
    ports:
      - "${ELASTIC_PORT:-9200}:9200"
      - "9300:9300"
    volumes:
      - elastic_data:/usr/share/elasticsearch/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Kibana - Elasticsearch UI (Development only)
  kibana:
    image: kibana:8.10.2
    container_name: nexus-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - nexus-network
    depends_on:
      elasticsearch:
        condition: service_healthy
    profiles:
      - dev

  # RabbitMQ - Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: nexus-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-nexus}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_secret}
      RABBITMQ_DEFAULT_VHOST: nexus
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO - S3-compatible Object Storage
  minio:
    image: minio/minio:latest
    container_name: nexus-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-nexus}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-minio_secret}
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    networks:
      - nexus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Nginx - Reverse Proxy (Development)
  nginx:
    image: nginx:alpine
    container_name: nexus-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - nexus-network
    depends_on:
      - postgres
      - redis
    profiles:
      - prod

  # Adminer - Database Management UI (Development only)
  adminer:
    image: adminer:latest
    container_name: nexus-adminer
    restart: unless-stopped
    ports:
      - "${ADMINER_PORT:-8080}:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - nexus-network
    depends_on:
      - postgres
    profiles:
      - dev

  # Mailhog - Email Testing (Development only)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: nexus-mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_WEB_PORT:-8025}:8025"
    networks:
      - nexus-network
    profiles:
      - dev

networks:
  nexus-network:
    driver: bridge
    name: nexus-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elastic_data:
    driver: local
  rabbitmq_data:
    driver: local
  minio_data:
    driver: local
