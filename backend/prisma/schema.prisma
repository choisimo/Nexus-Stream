// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  name      String
  role      Role      @default(USER)
  active    Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  profile   Profile?
  documents Document[]
  workLogs  WorkLog[]
  comments  Comment[]
  activities UserActivity[]
  teamMembers TeamMember[]
}

model Profile {
  id         String  @id @default(uuid())
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  avatar     String?
  bio        String?
  department String?
  position   String?
  phone      String?
  timezone   String  @default("UTC")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Knowledge Base
model Document {
  id          String    @id @default(uuid())
  title       String
  content     String
  type        DocumentType
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  tags        Tag[]
  version     Int       @default(1)
  isPublished Boolean   @default(false)
  viewCount   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  comments    Comment[]
  versions    DocumentVersion[]
}

model DocumentVersion {
  id         String   @id @default(uuid())
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  content    String
  version    Int
  changelog  String?
  createdAt  DateTime @default(now())
  createdBy  String
}

model Category {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryTree", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryTree")
  documents   Document[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Tag {
  id        String     @id @default(uuid())
  name      String     @unique
  documents Document[]
  createdAt DateTime   @default(now())
}

// Work Logs
model WorkLog {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  title       String
  description String
  hours       Float
  date        DateTime
  status      WorkLogStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Projects
model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)
  startDate   DateTime
  endDate     DateTime?
  budget      Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  workLogs    WorkLog[]
  teams       Team[]
}

// Team Collaboration
model Team {
  id          String   @id @default(uuid())
  name        String
  description String?
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  members     TeamMember[]
  channels    Channel[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  role      TeamRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  @@unique([teamId, userId])
}

model Channel {
  id        String    @id @default(uuid())
  name      String
  teamId    String
  team      Team      @relation(fields: [teamId], references: [id])
  type      ChannelType @default(PUBLIC)
  createdAt DateTime  @default(now())
  
  messages  Message[]
}

model Message {
  id        String   @id @default(uuid())
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [id])
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Comments (for documents)
model Comment {
  id         String   @id @default(uuid())
  content    String
  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  parentId   String?
  parent     Comment? @relation("CommentTree", fields: [parentId], references: [id])
  children   Comment[] @relation("CommentTree")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Activity Tracking
model UserActivity {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  action     String
  entityType String
  entityId   String
  metadata   Json?
  createdAt  DateTime @default(now())
}

// Enums
enum Role {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum DocumentType {
  ARTICLE
  GUIDE
  FAQ
  POLICY
  TEMPLATE
  REPORT
}

enum WorkLogStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TeamRole {
  OWNER
  ADMIN
  MEMBER
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT
}
